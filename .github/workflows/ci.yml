# .github/workflows/ci.yml

name: CI/CD Pipeline for FastAPI

# Déclenche le workflow à chaque 'push' sur la branche 'main' ou 'master'
on:
  push:
    branches:
      - main
      - master

# VARIABLES GLOBALES
env:
  # Définir le nom de l'image de conteneur
  IMAGE_NAME: fastapi-ci-cd-api
  # Définir le registre
  REGISTRY: docker.io

jobs:
  # Job 1: Exécuter les tests (CI)
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run tests
        run: pytest
      
  # Job 2: Construire et Pousser l'image (CD)
  build-and-push:
    # Ce job s'exécute SEULEMENT si le job 'test' a réussi
    needs: test 
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Étape de connexion au registre (Docker Hub)
      # Utilise les secrets DOCKERHUB_USERNAME et DOCKERHUB_TOKEN que vous avez configurés
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Étape de construction de l'image et publication (push)
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # Utilise le répertoire courant où se trouve le Dockerfile
          push: true
          # Tag l'image avec le nom d'utilisateur, le nom de l'image, et le SHA unique du commit
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}